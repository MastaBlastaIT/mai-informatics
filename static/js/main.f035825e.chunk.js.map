{"version":3,"sources":["components/Sidebar/Sidebar.tsx","layouts/DefaultLayout.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Sidebar/Sidebar.module.sass","assets/mai-logo.svg"],"names":["Sider","Layout","Header","withRouter","props","collapsed","onCollapse","useState","menuCollapsed","setMenuCollapsed","useEffect","width","collapsible","trigger","className","styles","root","logo","src","alt","height","menu","defaultSelectedKeys","Item","key","type","style","background","padding","onClick","DefaultLayout","state","toggleCollapse","setState","this","Component","browserHistory","createBrowserHistory","hot","history","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"oVAMQA,EAAkBC,IAAlBD,MAAOE,EAAWD,IAAXC,OAoDAC,eA7CyB,SAAAC,GAAU,IACxCC,EAA0BD,EAA1BC,UAAWC,EAAeF,EAAfE,WAD4B,EAELC,oBAAkB,GAFb,mBAExCC,EAFwC,KAEzBC,EAFyB,KAQ/C,OAJAC,qBAAU,WACRD,EAAiBJ,KAChB,CAACA,IAGF,kBAAC,IAAD,KACE,kBAACL,EAAD,CACEW,MAAO,IACPC,aAAW,EACXP,UAAWG,EACXK,QAAS,KACTC,UAAWC,IAAOC,MAElB,yBAAKF,UAAWC,IAAOE,MACrB,yBAAKC,IAAKD,IAAME,IAAI,MAAMC,OAAQ,MAEpC,kBAAC,IAAD,CAAMN,UAAWC,IAAOM,KAAMC,oBAAqB,CAAC,MAClD,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,KAAK,cACX,2CAEF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,KAAK,YACX,6CAKN,kBAAC,IAAD,KACE,kBAACvB,EAAD,CAAQwB,MAAO,CAAEC,WAAY,OAAQC,QAAS,IAC5C,kBAAC,IAAD,CACEd,UAAWC,IAAOF,QAClBY,KAAMpB,EAAY,cAAgB,YAClCwB,QAASvB,UC9CfwB,E,2MACJC,MAAQ,CAAE1B,WAAW,G,EAErB2B,eAAiB,WAAO,IACd3B,EAAc,EAAK0B,MAAnB1B,UACR,EAAK4B,SAAS,CAAE5B,WAAYA,K,wEAGb,IACPA,EAAc6B,KAAKH,MAAnB1B,UAER,OAAO,kBAAC,EAAD,CAASA,UAAWA,EAAWC,WAAY4B,KAAKF,qB,GAX/BG,aAebhC,cAAW2B,G,QCXpBM,EAAiBC,cAURC,iBARO,WACpB,OACE,kBAAC,IAAD,CAAQC,QAASH,GACf,kBAAC,EAAD,UCDcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEzInBC,EAAOC,QAAU,CAAC,KAAO,sBAAsB,KAAO,sBAAsB,QAAU,yBAAyB,KAAO,sBAAsB,UAAY,2BAA2B,KAAO,sBAAsB,QAAU,2B,mBCD1ND,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.f035825e.chunk.js","sourcesContent":["import { Icon, Layout, Menu } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport styles from \"./Sidebar.module.sass\";\nimport logo from \"../../assets/mai-logo.svg\";\n\nconst { Sider, Header } = Layout;\n\ninterface SidebarProps extends RouteComponentProps {\n  collapsed: boolean;\n  onCollapse: any;\n}\n\nconst Sidebar: React.FC<SidebarProps> = props => {\n  const { collapsed, onCollapse } = props;\n  const [menuCollapsed, setMenuCollapsed] = useState<boolean>(false);\n\n  useEffect(() => {\n    setMenuCollapsed(collapsed);\n  }, [collapsed]);\n\n  return (\n    <Layout>\n      <Sider\n        width={200}\n        collapsible\n        collapsed={menuCollapsed}\n        trigger={null}\n        className={styles.root}\n      >\n        <div className={styles.logo}>\n          <img src={logo} alt=\"MAI\" height={70} />\n        </div>\n        <Menu className={styles.menu} defaultSelectedKeys={[\"1\"]}>\n          <Menu.Item key=\"1\">\n            <Icon type=\"pie-chart\" />\n            <span>Option 1</span>\n          </Menu.Item>\n          <Menu.Item key=\"2\">\n            <Icon type=\"desktop\" />\n            <span>Option 2</span>\n          </Menu.Item>\n        </Menu>\n      </Sider>\n\n      <Layout>\n        <Header style={{ background: \"#fff\", padding: 0 }}>\n          <Icon\n            className={styles.trigger}\n            type={collapsed ? \"menu-unfold\" : \"menu-fold\"}\n            onClick={onCollapse}\n          />\n        </Header>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default withRouter(Sidebar);\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport Sidebar from \"../components/Sidebar\";\n\nclass DefaultLayout extends Component<RouteComponentProps, any> {\n  state = { collapsed: false };\n\n  toggleCollapse = () => {\n    const { collapsed } = this.state;\n    this.setState({ collapsed: !collapsed });\n  };\n\n  public render() {\n    const { collapsed } = this.state;\n\n    return <Sidebar collapsed={collapsed} onCollapse={this.toggleCollapse} />;\n  }\n}\n\nexport default withRouter(DefaultLayout);\n","import React from \"react\";\nimport { hot } from \"react-hot-loader/root\";\n\nimport \"antd/dist/antd.css\";\nimport DefaultLayout from \"./layouts/DefaultLayout\";\nimport { Router } from \"react-router\";\nimport { createBrowserHistory } from \"history\";\n\nconst browserHistory = createBrowserHistory();\n\nconst App: React.FC = () => {\n  return (\n    <Router history={browserHistory}>\n      <DefaultLayout />\n    </Router>\n  );\n};\n\nexport default hot(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Sidebar_root__2oTMc\",\"menu\":\"Sidebar_menu__1ziVd\",\"submenu\":\"Sidebar_submenu__3zQ50\",\"logo\":\"Sidebar_logo__3Rc21\",\"collapsed\":\"Sidebar_collapsed__13EdM\",\"icon\":\"Sidebar_icon__3axEP\",\"trigger\":\"Sidebar_trigger__1SjDX\"};","module.exports = __webpack_public_path__ + \"static/media/mai-logo.21d7490c.svg\";"],"sourceRoot":""}